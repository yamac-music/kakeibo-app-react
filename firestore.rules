rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ============================================================================
    // 個人家計簿データ（後方互換性のため維持）
    // ============================================================================
    
    // 認証されたユーザーが自分のデータのみアクセス可能
    match /artifacts/{appId}/users/{userId}/{document=**} {
      allow read, write: if request.auth != null && 
                          request.auth.uid == userId &&
                          (resource == null || !resource.data.keys().hasAny(['uid']) || resource.data.uid == request.auth.uid) &&
                          (request.data == null || !request.data.keys().hasAny(['uid']) || request.data.uid == request.auth.uid);
    }
    
    // ============================================================================
    // 共有家計簿データ（新しい構造）
    // ============================================================================
    
    // グループデータ
    match /artifacts/{appId}/groups/{groupId} {
      allow read, write: if request.auth != null && 
                          (resource == null || 
                           request.auth.uid in resource.data.members ||
                           request.auth.uid == resource.data.createdBy);
    }
    
    // グループの支出データ
    match /artifacts/{appId}/groups/{groupId}/expenses/{expenseId} {
      function isGroupMember() {
        return request.auth != null && 
               exists(/databases/$(database)/documents/artifacts/$(appId)/userGroups/$(request.auth.uid)/groups/$(groupId));
      }
      
      function isPersonalGroup() {
        return groupId.matches('personal_.*') && 
               groupId == 'personal_' + request.auth.uid;
      }
      
      allow read, write: if isGroupMember() || isPersonalGroup();
    }
    
    // グループの設定データ
    match /artifacts/{appId}/groups/{groupId}/settings/{settingId} {
      function isGroupMember() {
        return request.auth != null && 
               exists(/databases/$(database)/documents/artifacts/$(appId)/userGroups/$(request.auth.uid)/groups/$(groupId));
      }
      
      function isPersonalGroup() {
        return groupId.matches('personal_.*') && 
               groupId == 'personal_' + request.auth.uid;
      }
      
      allow read, write: if isGroupMember() || isPersonalGroup();
    }
    
    // ユーザーのグループ一覧
    match /artifacts/{appId}/userGroups/{userId}/groups/{groupId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // 招待データ
    match /artifacts/{appId}/invitations/{invitationId} {
      // 招待を作成できるのは認証済みユーザー
      allow create: if request.auth != null &&
                     request.data.inviterUid == request.auth.uid;
      
      // 招待を読み取れるのは招待者または被招待者
      allow read: if request.auth != null && 
                   (resource.data.inviterUid == request.auth.uid ||
                    resource.data.inviteeEmail == request.auth.token.email);
      
      // 招待を更新できるのは被招待者（ステータス変更のため）
      allow update: if request.auth != null && 
                     resource.data.inviteeEmail == request.auth.token.email &&
                     request.data.diff(resource.data).affectedKeys().hasOnly(['status']);
    }
  }
}