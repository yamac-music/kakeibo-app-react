rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ヘルパー関数
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasValidUid() {
      return request.data.uid == request.auth.uid;
    }
    
    function isOwnerOfResource() {
      return resource == null || resource.data.uid == request.auth.uid;
    }
    
    // メイン認証ルール
    match /artifacts/{appId}/users/{userId}/{document=**} {
      allow read, write: if isAuthenticated() && 
                          isOwner(userId) &&
                          isOwnerOfResource() &&
                          (request.data == null || hasValidUid());
    }
    
    // 支出データのルール（明示的）
    match /artifacts/{appId}/users/{userId}/expenses/{expenseId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId) && hasValidUid();
      allow update: if isAuthenticated() && isOwner(userId) && 
                      isOwnerOfResource() && hasValidUid();
      allow delete: if isAuthenticated() && isOwner(userId) && isOwnerOfResource();
    }
    
    // 設定データのルール（明示的）
    match /artifacts/{appId}/users/{userId}/settings/{settingId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId) && hasValidUid();
      allow update: if isAuthenticated() && isOwner(userId) && 
                      isOwnerOfResource() && hasValidUid();
      allow delete: if isAuthenticated() && isOwner(userId) && isOwnerOfResource();
    }
    
    // 他のすべてのドキュメントへのアクセスを拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}